name: Integration Branch

on:
  push:
    branches: 
      - integration
  pull_request:
    branches: 
      - integration

jobs:
  build-test-and-ui-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create secrets.properties
      run: |
        echo "MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}" > secrets.properties
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Run unit tests
      run: ./gradlew test
      
    - name: Build APK testing
      run: ./gradlew assembleDebug
      
    - name: Upload APK to Testapp.io
      run: |
        echo "üöÄ Uploading APK to Testapp.io..."
        APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
        
        # V√©rifier que l'APK existe
        if [ ! -f "$APK_PATH" ]; then
          echo "‚ùå APK not found at $APK_PATH"
          exit 1
        fi
        
        echo "üì± APK Size: $(ls -lh ${APK_PATH} | awk '{print $5}')"
        
        # Fonction de retry avec backoff
        upload_with_retry() {
          local max_attempts=3
          local attempt=1
          local delay=10
          
          while [ $attempt -le $max_attempts ]; do
            echo "üîÑ Attempt $attempt/$max_attempts..."
            
            HTTP_CODE=$(curl -X POST \
              -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
              -F "file=@${APK_PATH}" \
              -F "app_id=${{ secrets.ID_APP }}" \
              "https://api.testapp.io/v1/upload" \
              -w "%{http_code}" \
              -s \
              -o response.json \
              --max-time 300)
            
            echo "üìä HTTP Response Code: $HTTP_CODE"
            
            if [ -f response.json ]; then
              echo "üìù Response body:"
              cat response.json
              echo ""
            fi
            
            case $HTTP_CODE in
              200|201)
                echo "‚úÖ APK uploaded successfully to Testapp.io!"
                echo "üîó Access your tests at: https://portal.testapp.io/i/meYGGWaYDJ"
                return 0
                ;;
              502|503|504)
                echo "‚ö†Ô∏è  Server error ($HTTP_CODE), retrying in ${delay}s..."
                if [ $attempt -lt $max_attempts ]; then
                  sleep $delay
                  delay=$((delay * 2))  # Exponential backoff
                fi
                ;;
              401|403)
                echo "‚ùå Authentication error ($HTTP_CODE). Check your API_TOKEN and ID_APP"
                return 1
                ;;
              *)
                echo "‚ùå Upload failed with HTTP code: $HTTP_CODE"
                return 1
                ;;
            esac
            
            attempt=$((attempt + 1))
          done
          
          echo "‚ùå All upload attempts failed"
          return 1
        }
        
        # Ex√©cuter l'upload avec retry
        if upload_with_retry; then
          echo "üéâ Upload completed successfully"
        else
          echo "üí• Upload failed after all retries"
          echo "‚ÑπÔ∏è  This might be a temporary Testapp.io server issue"
          echo "‚ÑπÔ∏è  Build will continue but manual upload may be needed"
          # Ne pas faire √©chouer le build pour un probl√®me temporaire de Testapp.io
        fi
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        
    - name: Send email notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "[INTEGRATION] Build Status: ${{ job.status }}"
        body: |
          Integration workflow completed.
          Status: ${{ job.status }}
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          
          APK built and uploaded to Testapp.io
          UI tests ready for execution
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions <noreply@github.com>