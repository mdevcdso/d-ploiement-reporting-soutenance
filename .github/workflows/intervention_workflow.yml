name: Integration Branch

on:
  push:
    branches: 
      - integration
  pull_request:
    branches: 
      - integration

jobs:
  build-test-and-ui-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create secrets.properties
      run: |
        echo "MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}" > secrets.properties
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Run unit tests
      run: ./gradlew test
      
    - name: Build APK testing
      run: ./gradlew assembleDebug
      
    - name: Upload APK to Testapp.io
      run: |
        echo "üöÄ Uploading APK to Testapp.io..."
        APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
        
        # V√©rifier que l'APK existe
        if [ ! -f "$APK_PATH" ]; then
          echo "‚ùå APK not found at $APK_PATH"
          exit 1
        fi
        
        echo "üì± APK Size: $(ls -lh ${APK_PATH} | awk '{print $5}')"
        
        # Tester diff√©rentes URLs API
        echo "üîç Testing API endpoints..."
        
        # Test 1: URL actuelle
        echo "Testing: https://api.testapp.io/v1/upload"
        curl -I "https://api.testapp.io/v1/upload" 2>/dev/null | head -1 || echo "Failed"
        
        # Test 2: URL alternative
        echo "Testing: https://testapp.io/api/v1/upload"
        curl -I "https://testapp.io/api/v1/upload" 2>/dev/null | head -1 || echo "Failed"
        
        # Test 3: URL alternative
        echo "Testing: https://api.testapp.io/upload"
        curl -I "https://api.testapp.io/upload" 2>/dev/null | head -1 || echo "Failed"
        
        # Test 4: Base API
        echo "Testing: https://api.testapp.io/"
        curl -s "https://api.testapp.io/" | head -3 || echo "Failed"
        
        # Fonction de retry avec plusieurs URLs
        upload_with_retry() {
          local max_attempts=2
          local attempt=1
          
          # URLs √† tester
          local urls=(
            "https://api.testapp.io/v1/upload"
            "https://testapp.io/api/v1/upload"
            "https://api.testapp.io/upload"
          )
          
          for url in "${urls[@]}"; do
            echo "üîÑ Trying URL: $url"
            
            HTTP_CODE=$(curl -X POST \
              -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
              -H "User-Agent: GitHub-Actions/1.0" \
              -H "Accept: application/json" \
              -F "file=@${APK_PATH}" \
              -F "app_id=${{ secrets.APP_ID }}" \
              "$url" \
              --max-time 120 \
              --connect-timeout 30 \
              --write-out "%{http_code}" \
              --silent \
              --output response.json)
            
            echo "üìä HTTP Response Code: $HTTP_CODE"
            
            # Afficher la r√©ponse
            if [ -f response.json ]; then
              echo "üìù Response (first 5 lines):"
              head -5 response.json
              echo ""
            fi
            
            case "$HTTP_CODE" in
              "200"|"201")
                echo "‚úÖ APK uploaded successfully!"
                echo "üîó Access: https://portal.testapp.io/i/meYGGWaYDJ"
                return 0
                ;;
              "404")
                echo "‚ùå URL not found - trying next URL..."
                continue
                ;;
              "401"|"403")
                echo "‚ùå Authentication/Authorization failed"
                echo "üîç Check your API_TOKEN and APP_ID secrets"
                return 1
                ;;
              "502"|"503"|"504")
                echo "‚ö†Ô∏è  Server error - trying next URL..."
                continue
                ;;
              *)
                echo "‚ö†Ô∏è  Unexpected code $HTTP_CODE - trying next URL..."
                continue
                ;;
            esac
          done
          
          return 1
        }
        
        # Debug des secrets (sans les r√©v√©ler)
        echo "üîç Checking secrets..."
        if [ ${#{{ secrets.API_TOKEN }}} -gt 10 ]; then
          echo "‚úÖ API_TOKEN appears valid (length: ${#{{ secrets.API_TOKEN }}})"
        else
          echo "‚ö†Ô∏è  API_TOKEN seems too short"
        fi
        
        if [ ${#{{ secrets.APP_ID }}} -gt 5 ]; then
          echo "‚úÖ APP_ID appears valid (length: ${#{{ secrets.APP_ID }}})"
        else
          echo "‚ö†Ô∏è  APP_ID seems too short"
        fi
        
        # Tentative d'upload
        if upload_with_retry; then
          echo "üéâ Upload successful!"
        else
          echo "üí• All upload attempts failed"
          echo "üìã Possible issues:"
          echo "   1. Wrong API endpoint URL"
          echo "   2. Invalid API_TOKEN or APP_ID"
          echo "   3. Testapp.io service issues"
          echo "   4. File format not accepted"
          echo ""
          echo "üìû Contact Testapp.io support with:"
          echo "   - Your APP_ID: ${{ secrets.APP_ID }}"
          echo "   - Error: 404 then 502"
          echo "   - File size: 18M"
          echo ""
          echo "üîó Manual upload: https://portal.testapp.io/i/meYGGWaYDJ"
        fi
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        
    - name: Send email notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "[INTEGRATION] Build Status: ${{ job.status }}"
        body: |
          Integration workflow completed.
          Status: ${{ job.status }}
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          
          APK built and uploaded to Testapp.io
          UI tests ready for execution
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions <noreply@github.com>