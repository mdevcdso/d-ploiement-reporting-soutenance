name: Integration Branch

on:
  push:
    branches: 
      - integration
  pull_request:
    branches: 
      - integration

jobs:
  build-test-and-ui-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Create secrets.properties
      run: |
        echo "MAPS_API_KEY=${{ secrets.MAPS_API_KEY }}" > secrets.properties
      
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        
    - name: Cache Gradle packages
      uses: actions/cache@v3
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-
          
    - name: Grant execute permission for gradlew
      run: chmod +x gradlew
      
    - name: Build with Gradle
      run: ./gradlew build
      
    - name: Run unit tests
      run: ./gradlew test
      
    - name: Build APK testing
      run: ./gradlew assembleDebug
      
    - name: Upload APK to Testapp.io
      run: |
        echo "üöÄ Uploading APK to Testapp.io..."
        APK_PATH="app/build/outputs/apk/debug/app-debug.apk"
        
        # V√©rifier que l'APK existe
        if [ ! -f "$APK_PATH" ]; then
          echo "‚ùå APK not found at $APK_PATH"
          exit 1
        fi
        
        echo "üì± APK Size: $(ls -lh ${APK_PATH} | awk '{print $5}')"
        
        # Fonction de retry avec backoff
        upload_with_retry() {
          local max_attempts=4  # Augment√© √† 4 tentatives
          local attempt=1
          local delay=15        # D√©lai initial plus long
          
          while [ $attempt -le $max_attempts ]; do
            echo "üîÑ Attempt $attempt/$max_attempts..."
            
            # Ajouter User-Agent et Accept headers
            HTTP_CODE=$(curl -X POST \
              -H "Authorization: Bearer ${{ secrets.API_TOKEN }}" \
              -H "User-Agent: GitHub-Actions/1.0" \
              -H "Accept: application/json" \
              -F "file=@${APK_PATH}" \
              -F "app_id=${{ secrets.ID_APP }}" \
              "https://api.testapp.io/v1/upload" \
              -w "%{http_code}" \
              -s \
              -o response.json \
              --max-time 600 \     # Augment√© √† 10 minutes
              --connect-timeout 30 \
              --retry 0)           # Pas de retry automatique curl
            
            echo "üìä HTTP Response Code: $HTTP_CODE"
            
            # V√©rifier si la r√©ponse contient du HTML (erreur serveur)
            if [ -f response.json ]; then
              if grep -q "<html>" response.json 2>/dev/null; then
                echo "üìù Server returned HTML error page (502/503 gateway error)"
                echo "üîç First line: $(head -1 response.json)"
              else
                echo "üìù Response body:"
                cat response.json
              fi
              echo ""
            fi
            
            case $HTTP_CODE in
              200|201)
                echo "‚úÖ APK uploaded successfully to Testapp.io!"
                echo "üîó Access your tests at: https://portal.testapp.io/i/meYGGWaYDJ"
                return 0
                ;;
              502|503|504|520|521|522|523|524)
                echo "‚ö†Ô∏è  Server/Gateway error ($HTTP_CODE) - Testapp.io infrastructure issue"
                if [ $attempt -lt $max_attempts ]; then
                  echo "‚è≥ Waiting ${delay}s before retry..."
                  sleep $delay
                  delay=$((delay + 15))  # Incr√©ments de 15s
                fi
                ;;
              401)
                echo "‚ùå Authentication error: Invalid API_TOKEN"
                echo "üîç Check your API_TOKEN secret in GitHub"
                return 1
                ;;
              403)
                echo "‚ùå Forbidden: Check your ID_APP or API permissions"
                return 1
                ;;
              413)
                echo "‚ùå File too large (18M). Testapp.io may have size limits"
                return 1
                ;;
              429)
                echo "‚ö†Ô∏è  Rate limited. Waiting longer..."
                if [ $attempt -lt $max_attempts ]; then
                  sleep 60  # Attendre 1 minute pour rate limit
                fi
                ;;
              000)
                echo "‚ùå Connection failed completely (timeout or network issue)"
                if [ $attempt -lt $max_attempts ]; then
                  sleep $delay
                fi
                ;;
              *)
                echo "‚ùå Upload failed with HTTP code: $HTTP_CODE"
                if [ $attempt -lt $max_attempts ]; then
                  sleep $delay
                fi
                ;;
            esac
            
            attempt=$((attempt + 1))
          done
          
          echo "‚ùå All $max_attempts upload attempts failed"
          return 1
        }
        
        # Ex√©cuter l'upload avec retry
        echo "üåê Testing Testapp.io API availability..."
        if curl -s --max-time 10 https://api.testapp.io/health >/dev/null 2>&1; then
          echo "‚úÖ Testapp.io API seems reachable"
        else
          echo "‚ö†Ô∏è  Testapp.io API may be experiencing issues"
        fi
        
        if upload_with_retry; then
          echo "üéâ Upload completed successfully"
        else
          echo "üí• Upload failed after all retries"
          echo "‚ÑπÔ∏è  This appears to be a Testapp.io infrastructure issue (502 errors)"
          echo "‚ÑπÔ∏è  Your APK is still available in GitHub Actions artifacts"
          echo "‚ÑπÔ∏è  You can manually upload at: https://portal.testapp.io/i/meYGGWaYDJ"
          # Ne pas faire √©chouer le build
          echo "‚è≠Ô∏è  Continuing workflow..."
        fi
        
    - name: Upload APK artifacts
      uses: actions/upload-artifact@v4
      with:
        name: debug-apk
        path: app/build/outputs/apk/debug/app-debug.apk
        
    - name: Send email notification
      if: always()
      uses: dawidd6/action-send-mail@v3
      with:
        server_address: smtp.gmail.com
        server_port: 587
        username: ${{ secrets.SMTP_USERNAME }}
        password: ${{ secrets.SMTP_PASSWORD }}
        subject: "[INTEGRATION] Build Status: ${{ job.status }}"
        body: |
          Integration workflow completed.
          Status: ${{ job.status }}
          Repository: ${{ github.repository }}
          Commit: ${{ github.sha }}
          
          APK built and uploaded to Testapp.io
          UI tests ready for execution
        to: ${{ secrets.NOTIFICATION_EMAIL }}
        from: GitHub Actions <noreply@github.com>